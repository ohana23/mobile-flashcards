{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/dannyohana/Desktop/mobile-flashcards/components/NewCard.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableOpacity, TouchableWithoutFeedback } from 'react-native-gesture-handler';\n\nvar NewCard = function (_React$Component) {\n  _inherits(NewCard, _React$Component);\n\n  var _super = _createSuper(NewCard);\n\n  function NewCard() {\n    var _this;\n\n    _classCallCheck(this, NewCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      questionValue: '',\n      answerValue: ''\n    };\n\n    _this.handleQuestionChange = function (question) {\n      _this.setState({\n        questionValue: question\n      });\n    };\n\n    _this.handleAnswerChange = function (answer) {\n      _this.setState({\n        answerValue: answer\n      });\n    };\n\n    _this.handleSubmit = function () {\n      Keyboard.dismiss();\n      navigation.navigate('DeckListScreen');\n    };\n\n    return _this;\n  }\n\n  _createClass(NewCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          questionValue = _this$state.questionValue,\n          answerValue = _this$state.answerValue;\n      var inputsIncomplete = questionValue === '' || answerValue === '';\n      return React.createElement(KeyboardAvoidingView, {\n        behavior: Platform.OS == \"ios\" ? \"padding\" : \"height\",\n        style: styles.container,\n        keyboardShouldPersistTaps: 'never',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: function onPress() {\n          return Keyboard.dismiss();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }, React.createElement(TextInput, {\n        style: styles.input,\n        placeholder: \"Question\",\n        multiline: true,\n        placeholderTextColor: \"rgb(150, 150, 180)\",\n        value: questionValue,\n        onChangeText: function onChangeText(question) {\n          return _this2.handleQuestionChange(question);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }\n      }), React.createElement(TextInput, {\n        style: styles.input,\n        placeholder: \"Answer\",\n        multiline: true,\n        placeholderTextColor: \"rgb(150, 150, 180)\",\n        value: answerValue,\n        onChangeText: function onChangeText(answer) {\n          return _this2.handleAnswerChange(answer);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }), React.createElement(TouchableOpacity, {\n        disabled: inputsIncomplete,\n        onPress: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: inputsIncomplete ? styles.buttonDisabled : styles.button,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }\n      }, \"SUBMIT\"), React.createElement(View, {\n        style: {\n          height: 60\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }\n      }))));\n    }\n  }]);\n\n  return NewCard;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center'\n  },\n  input: {\n    borderWidth: 2,\n    marginLeft: 10,\n    marginRight: 10,\n    marginBottom: 30,\n    borderColor: 'transparent',\n    borderRadius: 10,\n    padding: 10,\n    fontSize: 20,\n    fontWeight: 'bold',\n    height: 100,\n    backgroundColor: 'rgb(210, 210, 210)'\n  },\n  button: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: 'rgb(10, 125, 240)',\n    height: 50,\n    padding: 8,\n    textAlign: 'center',\n    letterSpacing: 1\n  },\n  buttonDisabled: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: 'lightgray',\n    height: 50,\n    padding: 8,\n    textAlign: 'center',\n    letterSpacing: 1\n  }\n});\nexport default NewCard;","map":{"version":3,"sources":["/Users/dannyohana/Desktop/mobile-flashcards/components/NewCard.js"],"names":["React","TouchableOpacity","TouchableWithoutFeedback","NewCard","state","questionValue","answerValue","handleQuestionChange","question","setState","handleAnswerChange","answer","handleSubmit","Keyboard","dismiss","navigation","navigate","inputsIncomplete","Platform","OS","styles","container","input","buttonDisabled","button","height","Component","StyleSheet","create","flex","justifyContent","borderWidth","marginLeft","marginRight","marginBottom","borderColor","borderRadius","padding","fontSize","fontWeight","backgroundColor","color","textAlign","letterSpacing"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { StyleSheet, Text, TextInput, Keyboard, KeyboardAvoidingView, Platform, View } from 'react-native'\nimport { TouchableOpacity, TouchableWithoutFeedback } from 'react-native-gesture-handler'\n\nclass NewCard extends React.Component {\n    state = {\n        questionValue: '',\n        answerValue: '',\n    }\n\n    handleQuestionChange = (question) => {\n        this.setState({ questionValue: question })\n    }\n\n    handleAnswerChange = (answer) => {\n        this.setState({ answerValue: answer })\n    }\n\n    handleSubmit = () => {\n        Keyboard.dismiss()\n        navigation.navigate('DeckListScreen')\n    }\n\n    render() {\n        const { questionValue, answerValue } = this.state\n        const inputsIncomplete = questionValue === '' || answerValue === ''\n        \n        return (\n            <KeyboardAvoidingView\n                behavior={Platform.OS == \"ios\" ? \"padding\" : \"height\"}\n                style={styles.container}\n                keyboardShouldPersistTaps={'never'}\n            >   \n                <TouchableWithoutFeedback onPress={() => Keyboard.dismiss()}>\n                    <TextInput\n                        style={styles.input}\n                        placeholder=\"Question\"\n                        multiline = {true}\n                        placeholderTextColor=\"rgb(150, 150, 180)\"\n                        value={questionValue}\n                        onChangeText={question => this.handleQuestionChange(question)}\n                    />\n                    <TextInput\n                        style={styles.input}\n                        placeholder=\"Answer\"\n                        multiline={true}\n                        placeholderTextColor=\"rgb(150, 150, 180)\"\n                        value={answerValue}\n                        onChangeText={answer => this.handleAnswerChange(answer)}\n                    />\n                    <TouchableOpacity\n                        disabled={inputsIncomplete}\n                        onPress={this.handleSubmit}\n                        >\n                        <Text style={inputsIncomplete ? styles.buttonDisabled : styles.button}>SUBMIT</Text>\n                        <View style={{height: 60}}></View>\n                    </TouchableOpacity>\n                </TouchableWithoutFeedback>\n            </KeyboardAvoidingView>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n    },\n    input: {\n        borderWidth: 2,\n        marginLeft: 10,\n        marginRight: 10,\n        marginBottom: 30,\n        borderColor: 'transparent',\n        borderRadius: 10,\n        padding: 10,\n        fontSize: 20,\n        fontWeight: 'bold',\n        height: 100,\n        backgroundColor: 'rgb(210, 210, 210)'\n    },\n    button: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: 'rgb(10, 125, 240)',\n        height: 50,\n        padding: 8,\n        textAlign: 'center',\n        letterSpacing: 1,\n    },\n    buttonDisabled: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: 'lightgray',\n        height: 50,\n        padding: 8,\n        textAlign: 'center',\n        letterSpacing: 1,\n    },\n  })\n  \n\nexport default NewCard"]},"metadata":{},"sourceType":"module"}