{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { decks } from \"./_DATA\";\nimport AsyncStorage from '@react-native-community/async-storage';\nexport var DECKS_STORAGE_KEY = 'MobileFlashcards:deck';\nexport function getData() {\n  return decks;\n}\nexport function getDecks() {\n  var item;\n  return _regeneratorRuntime.async(function getDecks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          item = _context.sent;\n\n          if (item === null) {\n            AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks));\n          }\n\n          return _context.abrupt(\"return\", item === null ? decks : JSON.parse(item));\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nexport function getDeck(id) {\n  var item;\n  return _regeneratorRuntime.async(function getDeck$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 3:\n          item = _context2.sent;\n          console.log(item);\n          return _context2.abrupt(\"return\", JSON.parse(item)[id]);\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nexport function saveDeckTitle(title) {\n  return _regeneratorRuntime.async(function saveDeckTitle$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            title: title,\n            questions: []\n          }))));\n\n        case 3:\n          _context3.next = 8;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n}\nexport function addCardToDeck(title, card) {\n  var deck;\n  return _regeneratorRuntime.async(function addCardToDeck$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(getDeck(title));\n\n        case 3:\n          deck = _context4.sent;\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            questions: _toConsumableArray(deck.questions).concat(card)\n          }))));\n\n        case 6:\n          _context4.next = 11;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}","map":{"version":3,"sources":["/Users/dannyohana/Desktop/mobile-flashcards/utils/api.js"],"names":["decks","AsyncStorage","DECKS_STORAGE_KEY","getData","getDecks","getItem","item","setItem","JSON","stringify","parse","console","log","getDeck","id","saveDeckTitle","title","mergeItem","questions","addCardToDeck","card","deck","concat"],"mappings":";;;AAAA,SAASA,KAAT;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,uBAA1B;AAEP,OAAO,SAASC,OAAT,GAAmB;AACtB,SAAOH,KAAP;AACH;AAED,OAAO,SAAeI,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEoBH,YAAY,CAACI,OAAb,CAAqBH,iBAArB,CAFpB;;AAAA;AAEOI,UAAAA,IAFP;;AAIC,cAAIA,IAAI,KAAK,IAAb,EAAmB;AACfL,YAAAA,YAAY,CAACM,OAAb,CAAqBL,iBAArB,EAAwCM,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAxC;AACH;;AANF,2CAQQM,IAAI,KAAK,IAAT,GACDN,KADC,GAEDQ,IAAI,CAACE,KAAL,CAAWJ,IAAX,CAVP;;AAAA;AAAA;AAAA;AAYCK,UAAAA,OAAO,CAACC,GAAR;;AAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAeC,OAAf,CAAuBC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEoBb,YAAY,CAACI,OAAb,CAAqBH,iBAArB,CAFpB;;AAAA;AAEOI,UAAAA,IAFP;AAGCK,UAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAHD,4CAIQE,IAAI,CAACE,KAAL,CAAWJ,IAAX,EAAiBQ,EAAjB,CAJR;;AAAA;AAAA;AAAA;AAMCH,UAAAA,OAAO,CAACC,GAAR;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAeG,aAAf,CAA6BC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEOf,YAAY,CAACgB,SAAb,CACFf,iBADE,EAEFM,IAAI,CAACC,SAAL,qBACKO,KADL,EACa;AACLA,YAAAA,KAAK,EAALA,KADK;AAELE,YAAAA,SAAS,EAAE;AAFN,WADb,EAFE,CAFP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYCP,UAAAA,OAAO,CAACC,GAAR;;AAZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAeO,aAAf,CAA6BH,KAA7B,EAAoCI,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEoBP,OAAO,CAACG,KAAD,CAF3B;;AAAA;AAEOK,UAAAA,IAFP;AAAA;AAAA,2CAIOpB,YAAY,CAACgB,SAAb,CACFf,iBADE,EAEFM,IAAI,CAACC,SAAL,qBACKO,KADL,EACa;AACLE,YAAAA,SAAS,EAAE,mBAAIG,IAAI,CAACH,SAAT,EAAoBI,MAApB,CAA2BF,IAA3B;AADN,WADb,EAFE,CAJP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaCT,UAAAA,OAAO,CAACC,GAAR;;AAbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { decks } from './_DATA'\nimport AsyncStorage from '@react-native-community/async-storage'\n\nexport const DECKS_STORAGE_KEY = 'MobileFlashcards:deck'\n\nexport function getData() {\n    return decks\n}\n\nexport async function getDecks() {\n    try {\n        const item = await AsyncStorage.getItem(DECKS_STORAGE_KEY)\n\n        if (item === null) {\n            AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks))\n        }\n\n        return item === null \n            ? decks\n            : JSON.parse(item)\n    } catch (err) {\n        console.log(err)\n    }\n}\n\nexport async function getDeck(id) {\n    try {\n        const item = await AsyncStorage.getItem(DECKS_STORAGE_KEY)\n        console.log(item)\n        return JSON.parse(item)[id]\n    } catch (err) {\n        console.log(err)\n    }\n}\n\nexport async function saveDeckTitle(title) {\n    try {\n        await AsyncStorage.mergeItem(\n            DECKS_STORAGE_KEY,\n            JSON.stringify({\n                [title]: {\n                    title,\n                    questions: []\n                }\n            })\n        )\n    } catch (err) {\n        console.log(err)\n    }\n}\n\nexport async function addCardToDeck(title, card) {\n    try {\n        const deck = await getDeck(title)\n\n        await AsyncStorage.mergeItem(\n            DECKS_STORAGE_KEY,\n            JSON.stringify({\n                [title]: {\n                    questions: [...deck.questions].concat(card)\n                }\n            })\n        )\n    } catch (err) {\n        console.log(err)\n    }\n}"]},"metadata":{},"sourceType":"module"}