{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/dannyohana/Desktop/mobile-flashcards/components/DeckList.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { FlatList, TouchableOpacity } from 'react-native-gesture-handler';\nimport { getDecks } from \"../utils/api\";\n\nvar DeckList = function (_React$Component) {\n  _inherits(DeckList, _React$Component);\n\n  var _super = _createSuper(DeckList);\n\n  function DeckList(props) {\n    var _this;\n\n    _classCallCheck(this, DeckList);\n\n    _this = _super.call(this, props);\n\n    _this.refreshPage = function () {\n      var fetchDecks = function fetchDecks() {\n        var response, decks;\n        return _regeneratorRuntime.async(function fetchDecks$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(getDecks());\n\n              case 2:\n                response = _context.sent;\n                _context.t0 = _this;\n                _context.next = 6;\n                return _regeneratorRuntime.awrap(response);\n\n              case 6:\n                _context.t1 = _context.sent;\n                decks = _context.t0.formatData.call(_context.t0, _context.t1);\n\n                _this.setState({\n                  DATA: decks\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      fetchDecks();\n    };\n\n    _this.state = {\n      DATA: []\n    };\n    return _this;\n  }\n\n  _createClass(DeckList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var fetchDecks = function fetchDecks() {\n        var response;\n        return _regeneratorRuntime.async(function fetchDecks$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(getDecks());\n\n              case 2:\n                response = _context2.sent;\n\n                _this2.setState({\n                  DATA: response\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      fetchDecks();\n      this.props.navigation.addListener('focus', function () {\n        console.log(\"hello world\");\n      });\n    }\n  }, {\n    key: \"formatData\",\n    value: function formatData(decks) {\n      var entries = Object.entries(decks);\n      var formattedData = [];\n\n      for (var i = 0; i < entries.length; i++) {\n        var deckEntry = {\n          title: entries[i][0],\n          numberOfCards: entries[i][1].questions.length\n        };\n        formattedData.push(deckEntry);\n      }\n\n      return formattedData;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var DATA = this.state.DATA;\n      var navigation = this.props.navigation;\n\n      var DeckItem = function DeckItem(_ref) {\n        var title = _ref.title,\n            numberOfCards = _ref.numberOfCards,\n            refreshPage = _ref.refreshPage;\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate('Deck Details', {\n              title: title,\n              numberOfCards: numberOfCards,\n              onGoBack: refreshPage\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }\n        }, React.createElement(View, {\n          style: styles.item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          style: styles.title,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }\n        }, title), React.createElement(Text, {\n          style: styles.subtitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }\n        }, numberOfCards + \" cards\")));\n      };\n\n      var renderItem = function renderItem(_ref2) {\n        var item = _ref2.item;\n        return React.createElement(DeckItem, {\n          title: item.title,\n          numberOfCards: item.numberOfCards,\n          refreshPage: _this3.refreshPage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }\n        });\n      };\n\n      var AddDeckButton = function AddDeckButton() {\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate('Create Deck');\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          style: styles.button,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 21\n          }\n        }, \"CREATE DECK\"));\n      };\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, React.createElement(FlatList, {\n        data: this.formatData(DATA),\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(item) {\n          return item.title;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }), React.createElement(AddDeckButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return DeckList;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  item: {\n    backgroundColor: 'rgb(10, 125, 240)',\n    borderRadius: 10,\n    marginLeft: 10,\n    marginRight: 10,\n    marginTop: 10,\n    padding: 20\n  },\n  title: {\n    fontSize: 20,\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  subtitle: {\n    color: 'white'\n  },\n  button: {\n    fontSize: 15,\n    fontWeight: 'bold',\n    color: 'rgb(10, 125, 240)',\n    height: 65,\n    textAlign: 'center',\n    padding: 22,\n    letterSpacing: 1\n  }\n});\nexport default DeckList;","map":{"version":3,"sources":["/Users/dannyohana/Desktop/mobile-flashcards/components/DeckList.js"],"names":["React","FlatList","TouchableOpacity","getDecks","DeckList","props","refreshPage","fetchDecks","response","decks","formatData","setState","DATA","state","navigation","addListener","console","log","entries","Object","formattedData","i","length","deckEntry","title","numberOfCards","questions","push","DeckItem","navigate","onGoBack","styles","item","subtitle","renderItem","AddDeckButton","button","container","Component","StyleSheet","create","flex","backgroundColor","borderRadius","marginLeft","marginRight","marginTop","padding","fontSize","color","fontWeight","height","textAlign","letterSpacing"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nimport { FlatList, TouchableOpacity } from 'react-native-gesture-handler'\nimport { getDecks } from '../utils/api'\n\nclass DeckList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            DATA: [],\n        }\n    }\n\n    componentDidMount() {\n        const fetchDecks = async () => {\n            const response = await getDecks()\n\n            this.setState({\n                DATA: response\n            })\n        }\n        fetchDecks()\n\n        this.props.navigation.addListener('focus', () => {\n            console.log(\"hello world\")\n        })\n    }\n\n    formatData(decks) {\n        let entries = Object.entries(decks)\n        var formattedData = []\n\n        for (let i = 0; i < entries.length; i++) {\n            let deckEntry = {\n                title: entries[i][0],\n                numberOfCards: entries[i][1].questions.length,\n            }\n            \n            formattedData.push(deckEntry)\n        }\n\n        return formattedData\n    }\n\n    refreshPage = () => {\n        const fetchDecks = async () => {\n            const response = await getDecks()\n            var decks = this.formatData(await response)\n\n            this.setState({\n                DATA: decks\n            })\n        }\n        fetchDecks()\n    }\n\n    render() {\n        const { DATA } = this.state\n        const { navigation } = this.props\n\n        const DeckItem = ({ title, numberOfCards, refreshPage }) => (\n            <TouchableOpacity\n                onPress={() => navigation.navigate('Deck Details', {\n                    title: title,\n                    numberOfCards: numberOfCards,\n                    onGoBack: refreshPage\n                })}\n            >\n                <View style={styles.item}>\n                        <Text style={styles.title}>{title}</Text>\n                        <Text style={styles.subtitle}>{numberOfCards + \" cards\"}</Text>\n                </View>\n            </TouchableOpacity>\n        )\n\n        const renderItem = ({ item }) => (\n            <DeckItem \n                title={item.title} \n                numberOfCards={item.numberOfCards}\n                refreshPage={this.refreshPage}\n            />\n        )\n\n        const AddDeckButton = () => {\n            return (\n                <TouchableOpacity\n                    onPress={() => navigation.navigate('Create Deck')}\n                >\n                    <Text style={styles.button}>CREATE DECK</Text>\n                </TouchableOpacity>\n            )\n        }\n\n        return (\n            <View style={styles.container}>\n                <FlatList \n                    data={this.formatData(DATA)}\n                    renderItem={renderItem}\n                    keyExtractor={item => item.title}\n                />\n                <AddDeckButton />\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n    },\n    item: {\n        backgroundColor: 'rgb(10, 125, 240)',\n        borderRadius: 10,\n        marginLeft: 10,\n        marginRight: 10,\n        marginTop: 10,\n        padding: 20,\n    },\n    title: {\n        fontSize: 20,\n        color: 'white',\n        fontWeight: 'bold'\n    },\n    subtitle: {\n        color: 'white'\n    },\n    button: {\n        fontSize: 15,\n        fontWeight: 'bold',\n        color: 'rgb(10, 125, 240)',\n        height: 65,\n        textAlign: 'center',\n        padding: 22,\n        letterSpacing: 1\n    }\n  })\n  \n\nexport default DeckList"]},"metadata":{},"sourceType":"module"}