{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/dannyohana/Desktop/mobile-flashcards/components/DeckDetails.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { getDeck } from \"../utils/api\";\n\nvar DeckDetails = function (_React$Component) {\n  _inherits(DeckDetails, _React$Component);\n\n  var _super = _createSuper(DeckDetails);\n\n  function DeckDetails(props) {\n    var _this;\n\n    _classCallCheck(this, DeckDetails);\n\n    _this = _super.call(this, props);\n\n    _this.refreshPage = function (updatedNumberOfCards) {\n      _this.setState({\n        numberOfCards: updatedNumberOfCards\n      });\n    };\n\n    _this.getNumberOfCards = function () {\n      var deckList = _this.state.deckList;\n\n      if (Object.keys(deckList).length !== 0) {\n        return deckList.questions.length;\n      } else {\n        return 0;\n      }\n    };\n\n    _this.state = {\n      deckList: {},\n      numberOfCards: _this.props.route.params.numberOfCards\n    };\n    return _this;\n  }\n\n  _createClass(DeckDetails, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var fetchDeck = function fetchDeck() {\n        var response;\n        return _regeneratorRuntime.async(function fetchDeck$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(getDeck(_this2.props.route.params.title));\n\n              case 2:\n                response = _context.sent;\n\n                _this2.setState({\n                  deckList: response\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n\n      fetchDeck();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          route = _this$props.route,\n          navigation = _this$props.navigation;\n      var _this$state = this.state,\n          deckList = _this$state.deckList,\n          numberOfCards = _this$state.numberOfCards;\n\n      var StartQuizButton = function StartQuizButton(_ref) {\n        var buttonText = _ref.buttonText;\n        return React.createElement(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            return navigation.navigate('Start Quiz', {\n              deckList: deckList\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }\n        }, buttonText));\n      };\n\n      var AddCardButton = function AddCardButton(_ref2) {\n        var buttonText = _ref2.buttonText,\n            deckTitle = _ref2.deckTitle,\n            refreshPage = _ref2.refreshPage,\n            numberOfCards = _ref2.numberOfCards;\n        return React.createElement(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            return navigation.push('New Card', {\n              deckTitle: deckTitle,\n              onGoBack: refreshPage,\n              numberOfCards: numberOfCards\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }\n        }, buttonText));\n      };\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, route.params.title), React.createElement(Text, {\n        style: styles.subtitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }, route.params.subtitle), React.createElement(Text, {\n        style: styles.subtitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }, numberOfCards + \" cards\"), React.createElement(View, {\n        style: styles.buttonGroup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      }, React.createElement(StartQuizButton, {\n        buttonText: \"START QUIZ\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }), React.createElement(AddCardButton, {\n        buttonText: \"ADD A CARD\",\n        deckTitle: route.params.title,\n        refreshPage: this.refreshPage,\n        numberOfCards: numberOfCards,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return DeckDetails;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    textAlign: 'center',\n    fontSize: 50,\n    fontWeight: 'bold'\n  },\n  subtitle: {\n    fontSize: 20,\n    marginTop: 5,\n    fontSize: 30,\n    textAlign: 'center'\n  },\n  button: {\n    height: 50,\n    padding: 8,\n    marginBottom: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    letterSpacing: 1\n  },\n  buttonGroup: {\n    marginTop: 100\n  }\n});\nexport default DeckDetails;","map":{"version":3,"sources":["/Users/dannyohana/Desktop/mobile-flashcards/components/DeckDetails.js"],"names":["React","TouchableOpacity","getDeck","DeckDetails","props","refreshPage","updatedNumberOfCards","setState","numberOfCards","getNumberOfCards","deckList","state","Object","keys","length","questions","route","params","fetchDeck","title","response","navigation","StartQuizButton","buttonText","styles","button","navigate","AddCardButton","deckTitle","push","onGoBack","container","subtitle","buttonGroup","Component","StyleSheet","create","flex","alignItems","justifyContent","textAlign","fontSize","fontWeight","marginTop","height","padding","marginBottom","letterSpacing"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,OAAT;;IAEMC,W;;;;;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAoBnBC,WApBmB,GAoBL,UAACC,oBAAD,EAA0B;AACpC,YAAKC,QAAL,CAAc;AACVC,QAAAA,aAAa,EAAEF;AADL,OAAd;AAGH,KAxBkB;;AAAA,UA2BnBG,gBA3BmB,GA2BA,YAAM;AAAA,UACbC,QADa,GACA,MAAKC,KADL,CACbD,QADa;;AAGrB,UAAIE,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,MAAtB,KAAiC,CAArC,EAAwC;AACpC,eAAOJ,QAAQ,CAACK,SAAT,CAAmBD,MAA1B;AACH,OAFD,MAEO;AACH,eAAO,CAAP;AACH;AACJ,KAnCkB;;AAEf,UAAKH,KAAL,GAAa;AACTD,MAAAA,QAAQ,EAAE,EADD;AAETF,MAAAA,aAAa,EAAE,MAAKJ,KAAL,CAAWY,KAAX,CAAiBC,MAAjB,CAAwBT;AAF9B,KAAb;AAFe;AAMlB;;;;wCAEmB;AAAA;;AAChB,UAAMU,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDACShB,OAAO,CAAC,MAAI,CAACE,KAAL,CAAWY,KAAX,CAAiBC,MAAjB,CAAwBE,KAAzB,CADhB;;AAAA;AACRC,gBAAAA,QADQ;;AAEd,gBAAA,MAAI,CAACb,QAAL,CAAc;AACVG,kBAAAA,QAAQ,EAAEU;AADA,iBAAd;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlB;;AAOAF,MAAAA,SAAS;AAEZ;;;6BAmBQ;AAAA,wBACyB,KAAKd,KAD9B;AAAA,UACGY,KADH,eACGA,KADH;AAAA,UACUK,UADV,eACUA,UADV;AAAA,wBAE+B,KAAKV,KAFpC;AAAA,UAEGD,QAFH,eAEGA,QAFH;AAAA,UAEaF,aAFb,eAEaA,aAFb;;AAIL,UAAMc,eAAe,GAAG,SAAlBA,eAAkB,OAAoB;AAAA,YAAjBC,UAAiB,QAAjBA,UAAiB;AACxC,eACI,oBAAC,gBAAD;AACI,UAAA,KAAK,EAAEC,MAAM,CAACC,MADlB;AAEI,UAAA,OAAO,EAAE;AAAA,mBAAMJ,UAAU,CAACK,QAAX,CAAoB,YAApB,EAAkC;AAC7ChB,cAAAA,QAAQ,EAARA;AAD6C,aAAlC,CAAN;AAAA,WAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEc,MAAM,CAACD,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiCA,UAAjC,CANJ,CADJ;AAUH,OAXD;;AAaA,UAAMI,aAAa,GAAG,SAAhBA,aAAgB,QAA2D;AAAA,YAAxDJ,UAAwD,SAAxDA,UAAwD;AAAA,YAA5CK,SAA4C,SAA5CA,SAA4C;AAAA,YAAjCvB,WAAiC,SAAjCA,WAAiC;AAAA,YAApBG,aAAoB,SAApBA,aAAoB;AAC7E,eACI,oBAAC,gBAAD;AACI,UAAA,KAAK,EAAEgB,MAAM,CAACC,MADlB;AAEI,UAAA,OAAO,EAAE;AAAA,mBAAMJ,UAAU,CAACQ,IAAX,CAAgB,UAAhB,EAA4B;AACvCD,cAAAA,SAAS,EAATA,SADuC;AAEvCE,cAAAA,QAAQ,EAAEzB,WAF6B;AAGvCG,cAAAA,aAAa,EAAbA;AAHuC,aAA5B,CAAN;AAAA,WAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAQI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEgB,MAAM,CAACD,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAiCA,UAAjC,CARJ,CADJ;AAYH,OAbD;;AAeA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACO,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEP,MAAM,CAACL,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4BH,KAAK,CAACC,MAAN,CAAaE,KAAzC,CADJ,EAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEK,MAAM,CAACQ,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BhB,KAAK,CAACC,MAAN,CAAae,QAA5C,CAFJ,EAGI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAER,MAAM,CAACQ,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+BxB,aAAa,GAAG,QAA/C,CAHJ,EAKI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEgB,MAAM,CAACS,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,eAAD;AAAiB,QAAA,UAAU,EAAC,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,aAAD;AACI,QAAA,UAAU,EAAC,YADf;AAEI,QAAA,SAAS,EAAEjB,KAAK,CAACC,MAAN,CAAaE,KAF5B;AAGI,QAAA,WAAW,EAAE,KAAKd,WAHtB;AAII,QAAA,aAAa,EAAEG,aAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CALJ,CADJ;AAkBH;;;;EAxFqBR,KAAK,CAACkC,S;;AA4FhC,IAAMV,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE;AAHP,GADkB;AAM7BpB,EAAAA,KAAK,EAAE;AACHqB,IAAAA,SAAS,EAAE,QADR;AAEHC,IAAAA,QAAQ,EAAE,EAFP;AAGHC,IAAAA,UAAU,EAAE;AAHT,GANsB;AAW7BV,EAAAA,QAAQ,EAAE;AACNS,IAAAA,QAAQ,EAAE,EADJ;AAENE,IAAAA,SAAS,EAAE,CAFL;AAGNF,IAAAA,QAAQ,EAAE,EAHJ;AAIND,IAAAA,SAAS,EAAE;AAJL,GAXmB;AAiB7Bf,EAAAA,MAAM,EAAE;AACJmB,IAAAA,MAAM,EAAE,EADJ;AAEJC,IAAAA,OAAO,EAAE,CAFL;AAGJC,IAAAA,YAAY,EAAE;AAHV,GAjBqB;AAsB7BvB,EAAAA,UAAU,EAAE;AACRkB,IAAAA,QAAQ,EAAE,EADF;AAERC,IAAAA,UAAU,EAAE,MAFJ;AAGRF,IAAAA,SAAS,EAAE,QAHH;AAIRO,IAAAA,aAAa,EAAE;AAJP,GAtBiB;AA4B7Bd,EAAAA,WAAW,EAAE;AACTU,IAAAA,SAAS,EAAE;AADF;AA5BgB,CAAlB,CAAf;AAkCA,eAAexC,WAAf","sourcesContent":["import React from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\nimport { TouchableOpacity } from 'react-native-gesture-handler'\nimport { getDeck } from '../utils/api'\n\nclass DeckDetails extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            deckList: {},\n            numberOfCards: this.props.route.params.numberOfCards\n        }\n    }\n\n    componentDidMount() {\n        const fetchDeck = async () => {\n            const response = await getDeck(this.props.route.params.title)\n            this.setState({\n                deckList: response,\n            })\n        }\n\n        fetchDeck()\n\n    }\n\n    refreshPage = (updatedNumberOfCards) => {\n        this.setState({\n            numberOfCards: updatedNumberOfCards\n        })\n    }\n\n    // TODO: make this fail-proof\n    getNumberOfCards = () => {\n        const { deckList } = this.state\n\n        if (Object.keys(deckList).length !== 0) {\n            return deckList.questions.length\n        } else {\n            return 0\n        }\n    }\n\n    render() {\n        const { route, navigation } = this.props\n        const { deckList, numberOfCards } = this.state\n    \n        const StartQuizButton = ({ buttonText }) => {\n            return (\n                <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => navigation.navigate('Start Quiz', { \n                        deckList \n                    })}\n                >\n                    <Text style={styles.buttonText}>{buttonText}</Text>\n                </TouchableOpacity>\n            )\n        }\n    \n        const AddCardButton = ({ buttonText, deckTitle, refreshPage, numberOfCards }) => {\n            return (\n                <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => navigation.push('New Card', { \n                        deckTitle, \n                        onGoBack: refreshPage,\n                        numberOfCards\n                    })}\n                >\n                    <Text style={styles.buttonText}>{buttonText}</Text>\n                </TouchableOpacity>\n            )\n        }\n\n        return (\n            <View style={styles.container}>\n                <Text style={styles.title}>{route.params.title}</Text>\n                <Text style={styles.subtitle}>{route.params.subtitle}</Text>\n                <Text style={styles.subtitle}>{numberOfCards + \" cards\"}</Text>\n    \n                <View style={styles.buttonGroup}>\n                    <StartQuizButton buttonText=\"START QUIZ\" />\n                    <AddCardButton \n                        buttonText=\"ADD A CARD\" \n                        deckTitle={route.params.title}\n                        refreshPage={this.refreshPage}\n                        numberOfCards={numberOfCards}\n                    />\n                </View>\n    \n            </View>\n        )\n    }\n\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    title: {\n        textAlign: 'center',\n        fontSize: 50,\n        fontWeight: 'bold',\n    },\n    subtitle: {\n        fontSize: 20,\n        marginTop: 5,\n        fontSize: 30,\n        textAlign: 'center'\n    },\n    button: {\n        height: 50,\n        padding: 8,\n        marginBottom: 20,\n    },\n    buttonText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        textAlign: 'center',\n        letterSpacing: 1,\n    },\n    buttonGroup: {\n        marginTop: 100,\n    }\n  })\n  \n\nexport default DeckDetails"]},"metadata":{},"sourceType":"module"}